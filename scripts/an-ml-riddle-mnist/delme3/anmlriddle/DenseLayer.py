# automatically generated by the FlatBuffers compiler, do not modify

# namespace: anmlriddle

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DenseLayer(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDenseLayer(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DenseLayer()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def DenseLayerBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x4D\x52\x4D", size_prefixed=size_prefixed)

    # DenseLayer
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DenseLayer
    def Weights(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from anmlriddle.Matrix import Matrix
            obj = Matrix()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DenseLayer
    def Biases(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # DenseLayer
    def BiasesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int16Flags, o)
        return 0

    # DenseLayer
    def BiasesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DenseLayer
    def BiasesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def DenseLayerStart(builder): builder.StartObject(2)
def DenseLayerAddWeights(builder, weights): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(weights), 0)
def DenseLayerAddBiases(builder, biases): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(biases), 0)
def DenseLayerStartBiasesVector(builder, numElems): return builder.StartVector(2, numElems, 2)
def DenseLayerEnd(builder): return builder.EndObject()
